<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flink</title>
    <link>https://hello-world-example.github.io/Flink/</link>
    <description>Recent content on Flink</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Flink/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/_sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/_sidebar/</guid>
      <description> Quick-Start   Local 快速安装  Docker 方式安装  Word Count 示例程序   Opt   Standalone 集群方式  Standalone HA 部署  flink-conf.yaml 配置   Monitor   Flink Prometheus  REST API    获取 Github 源码  FAQ.. Tutorial   Ververica    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Cli/sql-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Cli/sql-client/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Connectors/DataSet-Connectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Connectors/DataSet-Connectors/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Connectors/DataStream-Connectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Connectors/DataStream-Connectors/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Connectors/RichSinkFunction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Connectors/RichSinkFunction/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Connectors/RichSourceFunction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Connectors/RichSourceFunction/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Connectors/Table-SQL-Connectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Connectors/Table-SQL-Connectors/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Example/hello-word-count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Example/hello-word-count/</guid>
      <description>Word Count 示例程序 Maven 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.flink&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;flink-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 示例代码    SocketWindowWordCount.java   package org.apache.flink.streaming.examples.socket; import org.apache.flink.api.common.functions.FlatMapFunction; import org.apache.flink.api.common.functions.ReduceFunction; import org.apache.flink.api.java.utils.ParameterTool; import org.apache.flink.streaming.api.datastream.DataStream; import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment; import org.apache.flink.streaming.api.windowing.time.Time; import org.apache.flink.util.Collector; /** * Implements a streaming windowed version of the &amp;#34;WordCount&amp;#34; program. * * &amp;lt;p&amp;gt;This program connects to a server socket and reads strings from the socket. * The easiest way to try this out is to open a text server (at port 12345) * using the &amp;lt;i&amp;gt;netcat&amp;lt;/i&amp;gt; tool via * &amp;lt;pre&amp;gt; * nc -l 12345 * &amp;lt;/pre&amp;gt; * and run this example with the hostname and the port as arguments.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Internals/Environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Internals/Environment/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Monitor/Prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Monitor/Prometheus/</guid>
      <description>Flink Prometheus 开启 PrometheusReporter $ vim conf/flink-conf.yaml metrics.reporters: prom metrics.reporter.prom.class: org.apache.flink.metrics.prometheus.PrometheusReporter metrics.reporter.prom.port: 9999 # 删除日志 $ rm -rf log/* # 分发配置 $ scp -r -P2208 /opt/websuite/flink-1.11.1 flink@s221.flink.learn.wx:/opt/websuite/ $ scp -r -P2208 /opt/websuite/flink-1.11.1 flink@s222.flink.learn.wx:/opt/websuite/ $ scp -r -P2208 /opt/websuite/flink-1.11.1 flink@s223.flink.learn.wx:/opt/websuite/ # 启动集群 $ ./bin/start-cluster.sh # 查看 暴露的 Prometheus 指标 $ curl http://s220.flink.learn.wx:9999 $ curl http://s221.flink.learn.wx:9999 配置 Prometheus  安装 Prometheus ：略
 # 增加以下配置并重启 $ vim prometheus.yml scrape_configs: - job_name: &amp;#39;flink_learn_cluster&amp;#39; static_configs: - targets: - s220.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Monitor/REST-API/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Monitor/REST-API/</guid>
      <description>Monitoring REST API  在 flink-conf.yaml 通过 rest.port 配置 API 端口 REST API 和 Web UI 公用一个端口 如果无需二次开发，大部分功能可通过 Web UI 查看  Cluster    Method URI Desc     GET /config 查看配置   GET /overview 集群概况   POST /savepoint-disposal    GET /savepoint-disposal/:triggerid    DELETE /cluster 关闭集群    JobManager    Method URI Desc     GET /jobmanager/config JobManager 配置   GET /jobmanager/logs JobManager 日志文件   GET /jobmanager/metrics[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Opt/Flink-Conf.yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Opt/Flink-Conf.yaml/</guid>
      <description>flink-conf.yaml  不作任何修改的情况下，默认是单节点 如果自定义 Java 版本可通过 env.java.home / JAVA_HOME 指定      Key Def Value Desc      jobmanager.rpc.address localhost TaskManager 链接 JobManager    jobmanager.rpc.port 6123 TaskManager 链接 JobManager    rest.address 0.0.0.0 Client REST API    rest.port 8081 Client REST API         Mem jobmanager.memory.process.size / jobmanager.heap.size 1600m    Mem taskmanager.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Opt/Install-By-Standalone-Cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Opt/Install-By-Standalone-Cluster/</guid>
      <description>Standalone 集群方式 环境准备  关闭防火墙 配置 ntp JDK 1.8.x+  配置 JAVA_HOME 或 在 conf/flink-conf.yaml 配置 env.java.home 指定 JDK 安装路径   创建 flink 用户 ssh 免密登陆  如果非默认端口，通过 在 conf/flink-conf.yaml 配置 env.ssh.opts: -p 2208 指定 ssh 端口   相同的目录结构（便于内置脚本会自动启动集群）  /opt/websuite/flink-1.11.1    集群节点 /etc/hosts
172.16.2.220 s220.flink.learn.wx # JobManager-Master 172.16.2.221 s221.flink.learn.wx # TaskManager 172.16.2.222 s222.flink.learn.wx # TaskManager 创建 flink 用户 # 切换到 root 账户 $ sudo su - # 创建用户 $ useradd flink # 设置密码 flink $ passwd flink # 尝试登录（需密码） $ ssh -p 2208 flink@s221.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Opt/Install-By-Standalone-HA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Opt/Install-By-Standalone-HA/</guid>
      <description>Standalone HA 部署  请先参考 Standalone 集群方式， HA 的部署基于此
 概述  Standalone 独立集群部署方式，默认只有一个 JobManager 如果这个 JobManager 挂掉，则 无法提交程序，程序也会报错 Flink 的 HA 模式是 保证 JobManager 的高可用，多个 JobManager 做主备，一个挂掉之后，备机可以及时顶上 主备 JobManager 通过 Zookeeper 实现 依赖  Hadoop HDFS Zookeeper（可内置）    HDFS 搭建  参考： Hadoop 快速搭建
 ??? 启用 内嵌 Zookeeper  【注意】以下操作全在 s220.flink.learn.wx 执行
 $ vim conf/zoo.cfg # ZooKeeper quorum peers server.0=s220.flink.learn.wx:2888:3888 server.1=s221.flink.learn.wx:2888:3888 server.2=s222.flink.learn.wx:2888:3888 # server.2=host:peer-port:leader-port # 分发 zoo 配置文件 $ scp -r -P2208 /opt/websuite/flink-1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Quick-Start/Docker-Flink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Quick-Start/Docker-Flink/</guid>
      <description>Docker Flink help $ docker pull flink:1.11.0 # 查看帮助 $ docker run --rm flink:1.11.0 help Usage: docker-entrypoint.sh (jobmanager|standalone-job|taskmanager|help) standalone-job $ docker run -d \  -p 18081:8081 \  -p 16123:6123 \  --name flink_standalone \  flink:1.11.0 standalone-job Cluster $ docker network create flink-network # Job Manager $ docker run -d \  -p 28081:8081 \  -p 26123:6123 \  --network flink-network \  --env FLINK_PROPERTIES=&amp;#34;jobmanager.rpc.address: jobmanager&amp;#34; \  --name jobmanager \  flink:1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Quick-Start/github-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Quick-Start/github-code/</guid>
      <description>获取 Github 源码 获取代码 # clone 国内镜像仓库，速度会快一点 $ git clone https://gitee.com/mirrors/apache-flink.git flink $ cd flink # 设置远程仓库为自己 clone 的仓库 $ git remote set-url origin https://github.com/o-fork/flink.git # 更新一下代码 $ git pull -p # Alibaba Blink 分支 $ git checkout blink # 官方 1.8 版本分支 $ git checkout release-1.8 # 从官方 1.8 版本分支，创建一个自己的分支 $ git checkout -b dev_kail_v1.8 # 推送同步一下远程 $ git push --set-upstream origin dev_kail_v1.8 打包 添加 pom.xml 仓库 vim pom.xml 添加 阿里的 Maven 仓库，这样打包(下载 jar 包)时会稍微块一点</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Quick-Start/Install-By-Local/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Quick-Start/Install-By-Local/</guid>
      <description>Local 安装 安装 $ java -version java version &amp;#34;1.8.0_151&amp;#34; Java(TM) SE Runtime Environment (build 1.8.0_151-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode) # https://flink.apache.org/downloads.html # $ cd /opt/package $ wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.12.tgz $ cd /opt/websuite $ cp /opt/package/flink-1.11.1-bin-scala_2.12.tgz . $ tar zxvf flink-1.11.1-bin-scala_2.12.tgz $ rm flink-1.11.1-bin-scala_2.12.tgz # 启动 $ cd /opt/websuite/flink-1.11.1/ $ ./bin/start-cluster.sh # 启动的 Java 进程 $ jps 34240 TaskManagerRunner 33989 StandaloneSessionClusterEntrypoint # 访问 http://localhost:8081 # 启动日志 $ tail -n 400 log/flink-*-standalonesession-*log* - -------------------------------------------------------------------------------- .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/TODO/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/TODO/</guid>
      <description>TODO  自定义监控指标  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Flink/docs/Tutorial/Ververica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Flink/docs/Tutorial/Ververica/</guid>
      <description>相关资源  Apache Flink 入门教程  ✔️ 1. 为什么要学习 Apache Flink？ - 陈守元（巴真） 阿里巴巴 高级产品专家  2. Apache Flink 概念介绍：有状态流式处理引擎的基石  3. Flink 安装部署、环境配置及运行应用程序  4.DataStream API 编程  5. 客户端操作  6. Flink Window、Time  7. 状态管理与容错机制  8. Flink Table API 编程 ✔️ 9. Flink SQL 编程   Apache Flink 进阶教程   1. Flink Runtime核心机制剖析  2. Flink Time 深度解析  3、Flink Checkpoint-轻量级分布式快照  4、Flink on Yarn/K8S原理剖析及实践  5、Flink 数据类型和序列化  6、Flink 作业执行解析  7、Flink 网络流控与反压剖析  8、Metrics 和监控  9、Flink Connector 分享  10、本地部署Zeppelin开发Flink程序  11、Flink State 最佳实践 ✔️ 12、TensorFlow 与 Apache Flink 的结合  https://github.</description>
    </item>
    
  </channel>
</rss>